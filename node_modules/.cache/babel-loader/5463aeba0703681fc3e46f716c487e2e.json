{"ast":null,"code":"var _jsxFileName = \"/Users/avrambillig/Desktop/projects/art-interactive/src/UploadView.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './UploadView.scss';\nimport React, { useCallback } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport TextareaAutosize from '@mui/base/TextareaAutosize';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nasync function postImage(_ref) {\n  let {\n    image,\n    description\n  } = _ref;\n  const formData = new FormData();\n  formData.append(\"image\", image);\n  formData.append(\"description\", description);\n  debugger; //   const result = await axios.post('http://localhost:3005/images', formData, { headers: {'Content-Type': 'multipart/form-data'}})\n  //   return result.data\n}\n\nconst img = {\n  width: '100px',\n  marginTop: '50px'\n};\n\nfunction UploadView() {\n  _s();\n\n  const [files, setFiles] = useState([]);\n  const [value, setValue] = React.useState('Controlled');\n  const onDrop = useCallback(acceptedFiles => {\n    const filesWithPreview = acceptedFiles.map(file => Object.assign(file, {\n      preview: URL.createObjectURL(file)\n    }));\n    setFiles(files => [...files, filesWithPreview]);\n  }, []);\n  const {\n    getRootProps,\n    getInputProps,\n    isDragActive\n  } = useDropzone({\n    onDrop\n  });\n\n  const handleChange = event => {\n    setValue(event.target.value);\n  };\n\n  const thumbs = files.map(file => /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        style: img,\n        src: file.preview // Revoke data uri after image is loaded\n        ,\n        onLoad: () => {\n          URL.revokeObjectURL(file.preview);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(TextareaAutosize, {\n        \"aria-label\": \"minimum height\",\n        minRows: 10,\n        placeholder: \"Description\",\n        style: {\n          width: 400\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 11\n    }, this)\n  }, file.name, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this));\n  useEffect(() => {\n    // Make sure to revoke the data uris to avoid memory leaks, will run on unmount\n    return () => files.forEach(file => URL.revokeObjectURL(file.preview));\n  }, []);\n  const [file, setFile] = useState();\n  const [description, setDescription] = useState(\"\");\n  const [images, setImages] = useState([]);\n\n  const submit = async event => {\n    event.preventDefault();\n    const result = await postImage({\n      image: file,\n      description\n    });\n    setImages([result.image, ...images]);\n  };\n\n  const fileSelected = event => {\n    const file = event.target.files[0];\n    setFile(file);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"uploadView\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: submit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: fileSelected,\n        type: \"file\",\n        accept: \"image/*\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        value: description,\n        onChange: e => setDescription(e.target.value),\n        type: \"text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), images.map(image => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: image\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }, this)\n    }, image, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", { ...getRootProps({\n          className: 'dropzone'\n        }),\n        children: [/*#__PURE__*/_jsxDEV(\"input\", { ...getInputProps()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Drag 'n' drop some files here, or click to select files\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"aside\", {\n        children: thumbs\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n}\n\n_s(UploadView, \"qXrBgqTcoI6qBSt8IF2oI/QmpgA=\", false, function () {\n  return [useDropzone];\n});\n\n_c = UploadView;\nexport default UploadView;\n\nvar _c;\n\n$RefreshReg$(_c, \"UploadView\");","map":{"version":3,"names":["useState","useEffect","axios","React","useCallback","useDropzone","TextareaAutosize","postImage","image","description","formData","FormData","append","img","width","marginTop","UploadView","files","setFiles","value","setValue","onDrop","acceptedFiles","filesWithPreview","map","file","Object","assign","preview","URL","createObjectURL","getRootProps","getInputProps","isDragActive","handleChange","event","target","thumbs","revokeObjectURL","name","forEach","setFile","setDescription","images","setImages","submit","preventDefault","result","fileSelected","e","className"],"sources":["/Users/avrambillig/Desktop/projects/art-interactive/src/UploadView.js"],"sourcesContent":["import { useState, useEffect } from 'react'\nimport axios from 'axios'\n\nimport './UploadView.scss'\n\nimport React, {useCallback} from 'react'\nimport {useDropzone} from 'react-dropzone'\nimport TextareaAutosize from '@mui/base/TextareaAutosize';\n\nasync function postImage({image, description}) {\n  const formData = new FormData();\n  formData.append(\"image\", image)\n  formData.append(\"description\", description)\n\n  debugger;\n\n//   const result = await axios.post('http://localhost:3005/images', formData, { headers: {'Content-Type': 'multipart/form-data'}})\n//   return result.data\n}\n\nconst img = {\n    width: '100px',\n    marginTop: '50px'\n}\n\n\nfunction UploadView() {\n    const [files, setFiles] = useState([]);\n    const [value, setValue] = React.useState('Controlled');\n\n    const onDrop = useCallback(acceptedFiles => {\n        \n        const filesWithPreview = acceptedFiles.map(file => Object.assign(file, {\n            preview: URL.createObjectURL(file)\n        }));\n\n\n        setFiles(files => [...files, filesWithPreview])\n          \n      }, [])\n      const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\n\n      const handleChange = (event) => {\n        setValue(event.target.value);\n      };\n\n      const thumbs = files.map(file => (\n        <div key={file.name}>\n          <div>\n            <img\n                style={img}\n              src={file.preview}\n              // Revoke data uri after image is loaded\n              onLoad={() => { URL.revokeObjectURL(file.preview) }}\n            />\n            {/* <TextField\n                id=\"standard-multiline-flexible\"\n                label=\"description\"\n                multiline\n                maxRows={40}\n                value={value}\n                onChange={handleChange}\n                variant=\"standard\"\n            /> */}\n            <TextareaAutosize\n                aria-label=\"minimum height\"\n                minRows={10}\n                placeholder=\"Description\"\n                style={{ width: 400 }}\n            />\n          </div>\n        </div>\n      ));\n    \n      useEffect(() => {\n        // Make sure to revoke the data uris to avoid memory leaks, will run on unmount\n        return () => files.forEach(file => URL.revokeObjectURL(file.preview));\n      }, []);\n\n  const [file, setFile] = useState()\n  const [description, setDescription] = useState(\"\")\n  const [images, setImages] = useState([])\n\n  const submit = async event => {\n    event.preventDefault()\n    const result = await postImage({image: file, description})\n    setImages([result.image, ...images])\n  }\n\n  const fileSelected = event => {\n    const file = event.target.files[0]\n\t\tsetFile(file)\n\t}\n\n  return (\n    <div className=\"uploadView\">\n      <form onSubmit={submit}>\n        <input onChange={fileSelected} type=\"file\" accept=\"image/*\"></input>\n        <input value={description} onChange={e => setDescription(e.target.value)} type=\"text\"></input>\n        <button type=\"submit\">Submit</button>\n      </form>\n\n      { images.map( image => (\n        <div key={image}>\n          <img src={image}></img>\n        </div>\n      ))}\n      \n      <section className=\"container\">\n      <div {...getRootProps({className: 'dropzone'})}>\n        <input {...getInputProps()} />\n        <p>Drag 'n' drop some files here, or click to select files</p>\n      </div>\n      <aside>\n        {thumbs}\n      </aside>\n    </section>\n    </div>\n  );\n}\n\nexport default UploadView;"],"mappings":"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"},"metadata":{},"sourceType":"module"}