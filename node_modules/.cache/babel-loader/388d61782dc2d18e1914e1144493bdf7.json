{"ast":null,"code":"var _jsxFileName = \"/Users/avrambillig/Desktop/projects/art-interactive/src/UploadView.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport axios from 'axios';\nimport './UploadView.scss';\nimport React, { useCallback } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nasync function postImage(_ref) {\n  let {\n    image,\n    description\n  } = _ref;\n  const formData = new FormData();\n  formData.append(\"image\", image);\n  formData.append(\"description\", description);\n  console.log('sup');\n  const result = await axios.post('http://localhost:3005/images', formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    }\n  });\n  return result.data;\n}\n\nfunction UploadView() {\n  _s();\n\n  const [files, setFiles] = useState([]);\n  const thumbsContainer = {\n    display: 'flex',\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    marginTop: 16\n  };\n  const thumb = {\n    display: 'inline-flex',\n    borderRadius: 2,\n    border: '1px solid #eaeaea',\n    marginBottom: 8,\n    marginRight: 8,\n    width: 100,\n    height: 100,\n    padding: 4,\n    boxSizing: 'border-box'\n  };\n  const thumbInner = {\n    display: 'flex',\n    minWidth: 0,\n    overflow: 'hidden'\n  };\n  const img = {\n    display: 'block',\n    width: 'auto',\n    height: '100%'\n  };\n  const onDrop = useCallback(acceptedFiles => {\n    setFiles(acceptedFiles.map(file => Object.assign(file, {\n      preview: URL.createObjectURL(file)\n    })));\n  }, []);\n  const {\n    getRootProps,\n    getInputProps,\n    isDragActive\n  } = useDropzone({\n    onDrop\n  });\n  const thumbs = files.map(file => /*#__PURE__*/_jsxDEV(\"div\", {\n    style: thumb,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: thumbInner,\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: file.preview,\n        style: img // Revoke data uri after image is loaded\n        ,\n        onLoad: () => {\n          URL.revokeObjectURL(file.preview);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 11\n    }, this)\n  }, file.name, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 9\n  }, this));\n  useEffect(() => {\n    // Make sure to revoke the data uris to avoid memory leaks, will run on unmount\n    return () => files.forEach(file => URL.revokeObjectURL(file.preview));\n  }, []); //   const [file, setFile] = useState()\n  //   const [description, setDescription] = useState(\"\")\n  //   const [images, setImages] = useState([])\n  //   const submit = async event => {\n  //     event.preventDefault()\n  //     const result = await postImage({image: file, description})\n  //     setImages([result.image, ...images])\n  //   }\n  //   const fileSelected = event => {\n  //     const file = event.target.files[0]\n  // \t\tsetFile(file)\n  // \t}\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"uploadView\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: submit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: fileSelected,\n        type: \"file\",\n        accept: \"image/*\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        value: description,\n        onChange: e => setDescription(e.target.value),\n        type: \"text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), images.map(image => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: image\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }, this)\n    }, image, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", { ...getRootProps({\n          className: 'dropzone'\n        }),\n        children: [/*#__PURE__*/_jsxDEV(\"input\", { ...getInputProps()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Drag 'n' drop some files here, or click to select files\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"aside\", {\n        style: thumbsContainer,\n        children: thumbs\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n}\n\n_s(UploadView, \"F53KKWG/6XM9R4yzwIqF/JgFa8s=\", false, function () {\n  return [useDropzone];\n});\n\n_c = UploadView;\nexport default UploadView;\n\nvar _c;\n\n$RefreshReg$(_c, \"UploadView\");","map":{"version":3,"names":["useState","axios","React","useCallback","useDropzone","postImage","image","description","formData","FormData","append","console","log","result","post","headers","data","UploadView","files","setFiles","thumbsContainer","display","flexDirection","flexWrap","marginTop","thumb","borderRadius","border","marginBottom","marginRight","width","height","padding","boxSizing","thumbInner","minWidth","overflow","img","onDrop","acceptedFiles","map","file","Object","assign","preview","URL","createObjectURL","getRootProps","getInputProps","isDragActive","thumbs","revokeObjectURL","name","useEffect","forEach","submit","fileSelected","e","setDescription","target","value","images","className"],"sources":["/Users/avrambillig/Desktop/projects/art-interactive/src/UploadView.js"],"sourcesContent":["import { useState } from 'react'\nimport axios from 'axios'\n\nimport './UploadView.scss'\n\nimport React, {useCallback} from 'react'\nimport {useDropzone} from 'react-dropzone'\n\nasync function postImage({image, description}) {\n  const formData = new FormData();\n  formData.append(\"image\", image)\n  formData.append(\"description\", description)\n\n  console.log('sup')\n\n  const result = await axios.post('http://localhost:3005/images', formData, { headers: {'Content-Type': 'multipart/form-data'}})\n  return result.data\n}\n\n\nfunction UploadView() {\n    const [files, setFiles] = useState([]);\n\n    const thumbsContainer = {\n        display: 'flex',\n        flexDirection: 'row',\n        flexWrap: 'wrap',\n        marginTop: 16\n      };\n      \n      const thumb = {\n        display: 'inline-flex',\n        borderRadius: 2,\n        border: '1px solid #eaeaea',\n        marginBottom: 8,\n        marginRight: 8,\n        width: 100,\n        height: 100,\n        padding: 4,\n        boxSizing: 'border-box'\n      };\n      \n      const thumbInner = {\n        display: 'flex',\n        minWidth: 0,\n        overflow: 'hidden'\n      };\n      \n      const img = {\n        display: 'block',\n        width: 'auto',\n        height: '100%'\n      };\n      \n\n    const onDrop = useCallback(acceptedFiles => {\n        \n        setFiles(acceptedFiles.map(file => Object.assign(file, {\n            preview: URL.createObjectURL(file)\n        })));\n          \n      }, [])\n      const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\n\n      const thumbs = files.map(file => (\n        <div style={thumb} key={file.name}>\n          <div style={thumbInner}>\n            <img\n              src={file.preview}\n              style={img}\n              // Revoke data uri after image is loaded\n              onLoad={() => { URL.revokeObjectURL(file.preview) }}\n            />\n          </div>\n        </div>\n      ));\n    \n      useEffect(() => {\n        // Make sure to revoke the data uris to avoid memory leaks, will run on unmount\n        return () => files.forEach(file => URL.revokeObjectURL(file.preview));\n      }, []);\n\n//   const [file, setFile] = useState()\n//   const [description, setDescription] = useState(\"\")\n//   const [images, setImages] = useState([])\n\n//   const submit = async event => {\n//     event.preventDefault()\n//     const result = await postImage({image: file, description})\n//     setImages([result.image, ...images])\n//   }\n\n//   const fileSelected = event => {\n//     const file = event.target.files[0]\n// \t\tsetFile(file)\n// \t}\n\n  return (\n    <div className=\"uploadView\">\n      <form onSubmit={submit}>\n        <input onChange={fileSelected} type=\"file\" accept=\"image/*\"></input>\n        <input value={description} onChange={e => setDescription(e.target.value)} type=\"text\"></input>\n        <button type=\"submit\">Submit</button>\n      </form>\n\n      { images.map( image => (\n        <div key={image}>\n          <img src={image}></img>\n        </div>\n      ))}\n      \n      <section className=\"container\">\n      <div {...getRootProps({className: 'dropzone'})}>\n        <input {...getInputProps()} />\n        <p>Drag 'n' drop some files here, or click to select files</p>\n      </div>\n      <aside style={thumbsContainer}>\n        {thumbs}\n      </aside>\n    </section>\n    </div>\n  );\n}\n\nexport default UploadView;"],"mappings":"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"},"metadata":{},"sourceType":"module"}